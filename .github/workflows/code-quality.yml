name: Code Quality

on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [main]

jobs:
    code-quality:
        name: Code Quality Analysis
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch full history for better analysis

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: "10.0.0"
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v4
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install --frozen-lockfile

            - name: Run ESLint with detailed reporting
              run: |
                  pnpm run -r lint --format=json --output-file=eslint-report.json || true
                  pnpm run -r lint || exit 1

            - name: Check code complexity
              run: |
                  # Install complexity checker
                  npm install -g complexity-report

                  # Generate complexity report for TypeScript files
                  find . -name "*.ts" -o -name "*.tsx" | grep -E "(src/|packages/)" | head -20 | xargs -I {} sh -c 'echo "=== {} ===" && cr {} || true'

            - name: Check for TODO/FIXME comments
              run: |
                  echo "🔍 Checking for TODO/FIXME comments..."
                  TODO_COUNT=$(grep -r -n "TODO\|FIXME\|XXX\|HACK" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ apps/ packages/ 2>/dev/null | wc -l || echo "0")
                  echo "Found $TODO_COUNT TODO/FIXME comments"

                  if [ "$TODO_COUNT" -gt 0 ]; then
                    echo "📝 TODO/FIXME comments found:"
                    grep -r -n "TODO\|FIXME\|XXX\|HACK" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" src/ apps/ packages/ 2>/dev/null || true
                  fi

            - name: Check package.json consistency
              run: |
                  echo "🔍 Checking package.json consistency..."

                  # Check for consistent dependency versions
                  echo "Checking for dependency version mismatches..."
                  cat apps/*/package.json packages/*/package.json | jq -r '.dependencies // {} | to_entries | .[] | "\(.key):\(.value)"' | sort | uniq -c | sort -nr | head -20

            - name: Dead code detection
              run: |
                  # Install and run knip for dead code detection
                  npx knip --reporter json --exclude-exports > knip-report.json || true

                  if [ -s knip-report.json ]; then
                    echo "⚠️ Potential dead code detected:"
                    cat knip-report.json | jq -r '.files[] | select(.exports.unused) | "\(.file): \(.exports.unused | join(", "))"' | head -10 || true
                  else
                    echo "✅ No obvious dead code detected"
                  fi

            - name: Bundle size estimation
              run: |
                  echo "📦 Estimating bundle sizes..."

                  # Build both apps and check bundle sizes
                  pnpm --filter buy-sell-cars-south-africa build > /dev/null 2>&1 || true
                  pnpm --filter buy-sell-cars-zimbabwe build > /dev/null 2>&1 || true

                  # Check .next build info if available
                  for app in buy-sell-cars-south-africa buy-sell-cars-zimbabwe; do
                    if [ -f "apps/$app/.next/build-manifest.json" ]; then
                      echo "📊 $app build info:"
                      ls -la "apps/$app/.next/static/" 2>/dev/null | head -5 || true
                    fi
                  done

            - name: Performance budget check
              run: |
                  echo "⚡ Performance budget check..."

                  # Define performance budgets (in KB)
                  MAX_JS_SIZE=500
                  MAX_CSS_SIZE=100

                  for app in buy-sell-cars-south-africa buy-sell-cars-zimbabwe; do
                    if [ -d "apps/$app/.next" ]; then
                      echo "Checking $app bundle sizes..."
                      
                      # Check JS bundle sizes
                      JS_SIZE=$(find "apps/$app/.next/static" -name "*.js" -exec du -k {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo "0")
                      CSS_SIZE=$(find "apps/$app/.next/static" -name "*.css" -exec du -k {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo "0")
                      
                      echo "$app - JS: ${JS_SIZE}KB, CSS: ${CSS_SIZE}KB"
                      
                      if [ "$JS_SIZE" -gt "$MAX_JS_SIZE" ]; then
                        echo "⚠️ $app JS bundle exceeds budget ($JS_SIZE KB > $MAX_JS_SIZE KB)"
                      fi
                      
                      if [ "$CSS_SIZE" -gt "$MAX_CSS_SIZE" ]; then
                        echo "⚠️ $app CSS bundle exceeds budget ($CSS_SIZE KB > $MAX_CSS_SIZE KB)"
                      fi
                    fi
                  done

            - name: Generate quality summary
              run: |
                  echo "📊 Code Quality Summary" > quality-summary.md
                  echo "=======================" >> quality-summary.md
                  echo "" >> quality-summary.md
                  echo "- 🧹 **Linting**: $(pnpm run -r lint > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")" >> quality-summary.md
                  echo "- 🔍 **Type Check**: $(pnpm run -r type-check > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")" >> quality-summary.md
                  echo "- 🧪 **Tests**: $(pnpm run -r test > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")" >> quality-summary.md
                  echo "- 🏗️ **Build**: $(pnpm run -r build > /dev/null 2>&1 && echo "✅ Passed" || echo "❌ Failed")" >> quality-summary.md
                  echo "" >> quality-summary.md

                  cat quality-summary.md

            - name: Upload quality reports
              uses: actions/upload-artifact@v4
              with:
                  name: code-quality-reports
                  path: |
                      eslint-report.json
                      knip-report.json
                      quality-summary.md
                  retention-days: 7
